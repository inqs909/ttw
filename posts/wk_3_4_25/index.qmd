---
title: "Tidy Tuesday Week 7"
author: "Isaac Quintanilla Salinas"
navbar: false
image: final.png
date: 03-04-25
description: Tidy Tuesday on Thursday at CSUCI! Analyzing Long Beach Animal Shelter Data! 

format:
  closeread-html:
    debug-mode: false
    cr-style:
      narrative-text-color-sidebar: white
      narrative-font-family: 'Georgia, "Times New Roman", Times, serif'
      narrative-font-size: 1.25rem
      narrative-sidebar-width: minmax(400px, 1fr)
      narrative-border-radius: 5px
      narrative-background-color-overlay: "#111111dd"
      narrative-background-color-sidebar: "#111111"
      section-background-color: "#033E3E"
      poem-font-family: 'Georgia, "Times New Roman", Times, serif'

editor: source
---


![](final.png){align="center"}

:::{.cr-section}

:::{focus-on="cr-fw"}
# Data
:::

This week for Tidy Tuesday, we are analyzing the Long Beach Animal Shelter Data provided by the [City of Long Beach Animal Care Services](https://www.longbeach.gov/acs/) and the [animalshelter](https://emilhvitfeldt.github.io/animalshelter/) R package.

The data set provides different characteristics of the animals located in the shelter such as type of animal, date of birth, latitude, longitude, and so much more! 

Each row in the data set represents an animal, and the columns represent the characteristics of the animal in the shelter.

For this week, I was inspired by Aditya Dahiya's Tidy Tuesday post [A City of Strays](https://aditya-dahiya.github.io/projects_presentations/data_vizs/tidy_animal_shelter.html). I am taking this a learning opportunity to improve my GIS skills as well as try some new things.

The data set comes fairly clean, and for the most part ready for analysis. However, further analysis will be needed to create to the plot. To begin, use the `glimpse()` to get a better idea of the data set.



:::{#cr-fw}

```{r}
#| echo: false
#| message: false

longbeach <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv')

longbeach |> 
  dplyr::select(animal_id, animal_type, latitude, longitude) |> 
  gt::gt() |> 
  gt::opt_interactive()

```


:::
:::


:::{.cr-section layout="sidebar-left"}

:::{focus-on="cr-walk"}
# Development
:::

To say that creating this map was easy would be a huge understatement. I spent more time than I would like to admit in creating this plot. But do not regret it on bit. **Note: You may need at least 16 GB RAM to run this!** 

The first part that I focused on was getting the roads on the map, and while the gif does not show it, there was much more trial and error that I would. At one moment, I had all the roads of southern california mapped out. Talk about putting my Framework to work!

Once I learned how to subset the roads to only the "main" ones, and geographically subset them for Long Beach, the map started to take place. I further subset the data to the city council districts polygons, using the shapefile found [here](https://data.longbeach.gov/explore/dataset/colb-council-districts/export/).

Afterwards, I decided to add parks, CSULB and LBCC to the map. The parks were easy, but the schools required some work. I decided to punish myself by adding the graduation cap emojis.

Lastly, I needed to add the donuts of the different pets available in animal shelters in each district. First, I needed to count how many of each pet was in the district, create a wide format, add the centroid locations for the districts, and plot the donuts. Then it was time to clean up the map.



:::{#cr-walk}
![](final.gif)
:::
:::



:::{.cr-section layout="sidebar-left"}

:::{focus-on="cr-twilight"}
# Final Plot
:::

The final plot shows the distributions of the type of animals in each district. As you can see, cats seems to be primary animal in shelters. 

You can also see that I had some fun with the plot. Additionally, there is small easter egg for all the Swifties I know in Long Beach!

:::{#cr-twilight}
![](final.png)
:::
:::


## CODE

Below is the code used to construct the plot above. You can find the raw, and completely ugly, code [here](https://github.com/inqs909/ttw/blob/main/posts/wk_3_4_25/plot_code_raw.R).




```{r}
#| eval: false
#| echo: true


## Loading Libraries

### Basics
library(tidyverse)    # Data wrangling, visualization, and pipes
library(csucistats)   # Custom utilities (e.g., for CSU Channel Islands)
library(scales)       # Tools for formatting scales (e.g., percent, commas)
library(utf8)         # Unicode support for emoji/text labels
library(paletteer)    # Access to many custom palettes (e.g., tayloRswift)

### Geocomputation
library(sf)           # Simple Features for vector data (points, lines, polygons)
library(osmdata)      # Download OSM features via Overpass API
library(osmextract)   # Download OSM extracts (.pbf) and read spatial layers
library(ggmap)        # Geocoding and base map imagery (not used here)
library(terra)        # Raster/vector spatial analysis
library(tidyterra)    # Tidy syntax for terra operations

## Week Tag (for saving/exporting later)
week <- "wk_3_4_25"

## Loading Data
longbeach <- readr::read_csv(
  'https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-04/longbeach.csv'
)

## View structure of the shelter dataset
glimpse(longbeach)

## Define bounding box for Long Beach and download OSM data
bbox <- getbb("Long Beach, California", format_out = "sf_polygon") |> 
  st_bbox()

# Download SoCal OSM .pbf (cached locally)
pbf_path <- oe_get("southern california", download_only = TRUE)

### Extract "lines" (roads, rail, paths, etc.) from the .pbf file within bbox
long_beach_lines <- oe_read(
  file_path = pbf_path,
  layer = "lines",
  vectortranslate_options = c(
    "-spat", as.character(bbox["xmin"]), as.character(bbox["ymin"]),
             as.character(bbox["xmax"]), as.character(bbox["ymax"])
  )
) 

## Load Council District Shapefile
# Download this manually from the city's open data portal and unzip
council_districts <- st_read("~/Downloads/colb-council-districts/colb-council-districts.shp")

# Simplify and rename key attributes
longbeach_districts <- council_districts |>
  mutate(
    district = council_num,
    pop = population,
    area = shape_area,
    geometry = geometry,
    .keep = "none"
  )

## Query OSM for Parks within the bounding box
parks_query <- opq(bbox = bbox) |> 
  add_osm_feature(key = "leisure", value = "park")

# Download park polygons
parks <- osmdata_sf(parks_query)$osm_polygons

## Filter road types and match CRS across layers
long_beach_roads <- long_beach_lines |> filter(highway %in% c("primary", "secondary", "tertiary"))
longbeach_districts <- st_transform(longbeach_districts, st_crs(long_beach_roads))

# Intersect roads and parks with Long Beach council districts
long_beach_roads_districts <- st_intersection(long_beach_roads, longbeach_districts)
parks <- st_transform(parks, st_crs(long_beach_roads))
parks_lb <- st_intersection(parks, longbeach_districts)

## CSU Long Beach coordinates (manually input)
csulb_coords <- data.frame(
  name = "CSU Long Beach",
  lon = -118.11429280930847,
  lat = 33.78408779473669
)

# Convert to sf point
csulb_point <- st_as_sf(csulb_coords, coords = c("lon", "lat"), crs = 4326)
csulb_xy <- st_coordinates(csulb_point)

# Add label and coordinates
csulb_point$label <- utf8::utf8_encode("\U0001F393")
csulb_point$X <- csulb_xy[, "X"]
csulb_point$Y <- csulb_xy[, "Y"]

## Long Beach City College coordinates
lbcc_coords <- data.frame(
  name = "Long Beach City College",
  lon = -118.1730186086269,
  lat = 33.791834376134744,
  label = utf8::utf8_encode("\U0001F393")
)

# Convert to sf and match projection
lbcc_point <- st_as_sf(lbcc_coords, coords = c("lon", "lat"), crs = 4326)
lbcc_point <- st_transform(lbcc_point, st_crs(csulb_point))

# Add X and Y coordinates
lbcc_xy <- st_coordinates(lbcc_point)
lbcc_point$X <- lbcc_xy[, "X"]
lbcc_point$Y <- lbcc_xy[, "Y"]

# Combine both school locations
schools <- rbind(csulb_point, lbcc_point)

## Long Beach Pets

# Convert shelter data to sf points using lat/lon
lb_pets <- longbeach |> 
  select(animal_id, animal_type, latitude, longitude) |> 
  st_as_sf(coords = c("longitude", "latitude"), crs = 4326)

# Reproject and join to districts
lb_pets <- st_transform(lb_pets, st_crs(longbeach_districts))
lb_pet_district <- st_join(lb_pets, longbeach_districts)

# Count animals by type and district
counts <- lb_pet_district |> 
  st_drop_geometry() |> 
  count(district, animal_type) |> 
  drop_na() |> 
  mutate(animal_type = case_when(
    animal_type == "amphibian" ~ "other",
    animal_type == "guinea pig" ~ "other",
    animal_type == "livestock" ~ "other",
    animal_type == "reptile" ~ "other",
    animal_type == "wild" ~ "other",
    animal_type == "other" ~ "other",
    .default = animal_type
  )) |> 
  group_by(district, animal_type) |> 
  summarise(sum = sum(n)) |> 
  ungroup() |> 
  pivot_wider(id_cols = district, names_from = animal_type, values_from = sum) |> 
  mutate(total = cat + dog + bird + rabbit + other)

## LB Centroid 
# Get spatial centroid for placing pie charts
lb_centroid <- st_centroid(longbeach_districts)

# Add coordinates to counts table
lb_counts <- left_join(counts, lb_centroid, by = "district") |> 
  mutate(
    longitude = st_coordinates(geometry)[, 1],
    latitude = st_coordinates(geometry)[, 2]
  ) |> 
  st_drop_geometry() |> 
  select(-geometry, -pop, -area)

## Plotting the Map
ggplot(data = long_beach_roads_districts) +
  
  # Plot the road segments in black
  geom_sf(color = "black", lwd = 0.1) +
  
  # Overlay the council district boundaries in dark red
  geom_sf(
    data = longbeach_districts,
    colour = "#871D20FF",  # dark red border
    fill = NA,             # no fill
    linewidth = 0.25       # thin border
  ) +
  
  # Add green park polygons with transparency
  geom_sf(
    data = parks_lb,
    fill = "forestgreen",
    color = NA,
    alpha = 0.35
  ) +
  
  # Add school location labels (e.g., CSU Long Beach, LBCC)
  geom_text(
    data = schools,
    aes(x = X, y = Y, label = label),
    size = 4
  ) +
  
  # Add pie charts showing pet distribution by district
  scatterpie::geom_scatterpie(
    data = lb_counts,
    aes(
      x = longitude,
      y = latitude,
      group = district
    ),
    cols = c("cat", "dog", "bird", "rabbit", "other"),  # pet types
    alpha = 0.9,
    donut_radius = 0.4,  # inner hole size (donut style)
    pie_scale = 4,       # scaling factor for pie size
    linewidth = 0.4      # border width of pie slices
  ) +
  
  # Apply a custom discrete fill palette with emoji-enhanced labels
  paletteer::scale_fill_paletteer_d(
    "tayloRswift::midnights",  # Taylor Swift "Midnights" palette
    labels = c(
      "cat" = paste("Cat", utf8::utf8_encode("\U0001F431")),
      "dog" = paste("Dog", utf8::utf8_encode("\U0001F436")),
      "bird" = paste("Bird", utf8::utf8_encode("\U0001F426")),
      "rabbit" = paste("Rabbit", utf8::utf8_encode("\U0001F430")),
      "other" = paste("Other", utf8::utf8_encode("\U0001F984"))
    )
  ) +
  
  # Add plot title and subtitle, remove axis labels
  labs(
    title = "Long Beach Animal Shelter",
    subtitle = "Pet Distribution by District",
    y = NULL,
    x = NULL
  ) +
  
  # Apply a clean black-and-white theme
  theme_bw() +
  
  # Move legend to bottom and remove title
  theme(
    legend.position = "bottom",
    legend.title = element_blank()
  )

## Saving Plot
ggsave(
  filename = paste0("final", ".png"),
  height = 6,
  width = 6,
  units = "in",
  dpi = 300
)




```