---
title: "Tidy Tuesday on Wednesday"
subtitle: "www.inqs.info/ttw"
date: 02-06-24
description: First week of Tidy Tuesday on Wednesday at CSUCI! Visualizing data from Heritage Sites
format:
  revealjs:
    scrollable: true
    preview-links: true
    navigation-mode: vertical
    controls-layout: bottom-right
    controls-tutorial: true
    incremental: false 
    chalkboard:
      src: chalkboard.json
      storage: chalkboard_pres
      theme: whiteboard
      chalk-width: 4
engine: knitr
knitr:
  opts_chunk: 
    echo: true
    eval: false
    comment: "#>" 
draft: false
categories:
  - sp2024
image: img/post1.png
execute: 
  cache: true
---

# Installation

## R Programming

R is a statistical programming package that allows you to conduct different types of analysis.

[R](https://www.r-project.org/)

## RStudio

A piece of software that organizes how you conduct statistical analysis in R.

[RStudio](https://posit.co/downloads/)

## Posit Cloud

A web version of RStudio.

[Posit Cloud](https://posit.cloud/login)

## R Packages

-   Tidyverse

-   plotly

-   ggthemes

-   esquisse

-   tidytuesdayR


## Load R Package

```{r}
#| echo: true
#| eval: true
#| message: false
#| warning: false

library(tidyverse)
library(plotly)
library(ggthemes)
library(esquisse)
library(tidytuesdayR)
```


- You must load packages every new R Session

## Visualization Resources

[R Graphics Cookbook](https://r-graphics.org/)

[R Graph Gallery](https://r-graph-gallery.com/)

[R Charts](https://r-charts.com/)

[ggplot2](https://ggplot2.tidyverse.org/)

# Tidy Tuesday

## Tidy Tuesday

Tidy Tuesday is a weekly data vizualization challenge from the [R 4 Data Science Online Community](https://github.com/rfordatascience/tidytuesday).

::: fragment
The goal is to make learning with real-world data easier.
:::

::: fragment
New data sets are released every week to create awesome visuals.
:::

## Week 6

This week looks at the number of heritage sites in 3 countries from the [Unesco World Heritage Convention](https://whc.unesco.org/en/list).

::: fragment

This is part of the [100 visualizations from 1 data set](https://100.datavizproject.com/).

:::


## Loading Data

```{r}
#| echo: true
#| eval: true

tuesdata <- tidytuesdayR::tt_load(2024, week = 6)
heritage <- tuesdata$heritage
heritage
```


## Examples

```{r}
#| label: ex1
#| code-fold: true
#| eval: true
#| fig-alt: |
#|   A dot plot showing the number of heritage sites for Denmark, Norway, 
#|   and Sweden for the years 2004 and 2022. The x-axis contains the year and 
#|   y-axis contains the number of heritage sites. The plot shows that Sweden 
#|   had the most sites in 2004 but did not add much since then. Denmark had 
#|   the lowest number of sites in 2004, but showed the greatest increase 
#|   of all three. Norway added a few sites since 2004. 

heritage2 <- heritage |> 
  pivot_longer(!country, names_to = "year", values_to = "value")
ggplot(heritage2, aes(x = year, y = value, color = country)) + 
  geom_point() + theme_bw()
```

## Examples

```{r}
#| label: ex2
#| code-fold: true
#| eval: true
#| fig-alt: |
#|   Demonstrates a stacked barplot of the number of heritage sites for Denmark,
#|   Norway, and Sweden for the years 2004 and 2022. The countries are on the 
#|   x-axis going left to right as Denmark, Norway, and Sweden.
#|   The y-axis contains the count of the number of heritage sites.
#|   Each bar contains two subbars stacked one on top of each other. 
#|   2004 represents the top bar and 2022 represents the bottom bar.
#|   The plot shows that Sweden had the most sites in 2004 
#|   but did not add much since then.
#|   Denmark had the lowest number of sites in 2004, 
#|   but showed the greatest increase of all three.
#|   Norway added a few sites since 2004. 

ggplot(heritage2, aes(country)) + 
  geom_bar(aes(weight = value, fill = year)) + 
  theme_bw()

```


## Examples

```{r}
#| label: ex3
#| code-fold: true
#| eval: true
#| fig-alt: |
#|   Demonstrates a rose pie, a circular plot with each petal represent a category, 
#|   of the number heritage sites for Denmark, Norway, 
#|   and Sweden for the years 2004 and 2022.
#|   There are 3 petals representing each country.
#|   Each petal contains 2 parts, the inner part represent year 2022, 
#|   and the outer part represents 2004.
#|   At the end of the petal, the name of the country represented with the count,
#|   and total percentage.
#|   The plot shows that Sweden had the most sites in 2004 but did not add much 
#|   since then.
#|   Denmark had the lowest number of sites in 2004, but showed the greatest 
#|   increase of all three.
#|   Norway added a few sites since 2004. 

library(ggpie)
heritage3 <- heritage2 |> uncount(value)
ggrosepie(heritage3, group_key = c("country", "year"),
             count_type = "full", label_info = "all",
             show_tick=F,donut_frac=NULL)

```

## Examples

```{r}
#| label: ex4
#| code-fold: true
#| eval: true
#| fig-alt: |
#|   A Sankey plot is displayed to show the relationship between country, year, 
#|   and heritage sites for Denmark, Sweden, Norway for the years 2004 and 2022.
#|   The left component contains the countries with 3 separate bars going from 
#|   top to bottom with Sweden top, Norway middle, and Denmark bottom.
#|   The left bars trasnfer to right bars representing years. There are 2 bars 
#|   vertically stacked with 2022 on top and 2004 at the bottom.
#|   The plot shows that Sweden had the most sites in 2004 but did not add much 
#|   since then.
#|   Denmark had the lowest number of sites in 2004, but showed the greatest 
#|   increase of all three.
#|   Norway added a few sites since 2004. 

# devtools::install_github("davidsjoberg/ggsankey")
library(ggsankey)
heritage4 <- heritage3 |> make_long(country, year)
pl <- ggplot(heritage4, aes(x = x,                        
                     next_x = next_x,                                     
                     node = node,
                     next_node = next_node,        
                     fill = factor(node)))
                     
pl <- pl + geom_sankey(flow.alpha = 0.5,          #This Creates the transparency of your node 
                      node.color = "black",     # This is your node color        
                      show.legend = TRUE)        # This determines if you want your legend to show

pl <- pl + theme_bw()

pl
```



## Examples

```{r}
#| label: ex5
#| code-fold: true
#| eval: true
#| fig-alt: |
#|  A tree map is displayed showing the number of heritage sites for Sweden, 
#|  Denmark, and Norway. 
#|  Contrary to the name, a partitioned rectangle is displayed with each 
#|  partition indicating the country.
#|  The partitions are further partitioned to display separate 
#|  sub-partitions indicating the separate years. 
#|  The plot shows that Sweden had the most sites in 2004 but did not 
#|  add much since then.
#|  Denmark had the lowest number of sites in 2004, but showed the greatest 
#|  increase of all three.
#|  Norway added a few sites since 2004. 

library(treemap)

treemap(heritage2,
        index=c("country","year"),
        vSize="value",
        type="index"
) 

```


## Examples

```{r}
#| label: ex6
#| code-fold: true
#| eval: true
#| fig-alt: |
#|  Two separte doughnut plots are displayed below to demonstrate the number of 
#|  heritage sites for Sweden, Denmark, and Norway for the years 2004 and 2022.
#|  Dougnut plots are circular pie chars with a hollowed center.
#|  The left hand has the 2004 doughnut plot. 
#|  The right side has the 2022 doughnut plot.
#|  Each dougnut plot displays the count for each country and 
#|  the center contains the total count.
#|  The plot shows that Sweden had the most sites in 2004 but did not 
#|  add much since then. Denmark had the lowest number of sites in 2004, 
#|  but showed the greatest increase of all three.
#|  Norway added a few sites since 2004. 

library(ggpie)
library(patchwork)


p1 <- heritage3 |> filter(year == 2004) |> 
  ggdonut(group_key = "country",
          count_type = "full") +
  ggtitle("Year 2004")
p2 <- heritage3 |> filter(year == 2022) |> 
  ggdonut(group_key = "country",
          count_type = "full") +
  ggtitle("Year 2022")
p1 + p2 +
  plot_layout(guides = 'collect')


```






# Graphing Examples

## Downloading Data Data

```{r}
#| echo: true
#| eval: false
#| 
u <- "https://www.inqs.info/p/plotathon/owenWilsonWows.csv"
basename(u)
download.file(u,
              file.path(getwd(), "data", basename(u)))

```

## Loading Data

```{r}
#| eval: false
mds <- read_csv("data/owenWilsonWows.csv")
```


## Base Plot

```{r}
#| label: gex1
#| fig-alt: |
#|    Creates a box to be used to create a plot. Using the ggplot2 functions.
#|    The bottom of the plot contains the number of wows by Owen Wilson in movies.

mds |> ggplot(aes(x = total_wows_in_movie)) 
```

## Histogram

```{r}
#| label: gex2
#| fig-alt: |
#|    A histogram is created with the number of wows for Owen Wilson.
#|    The plot counts how often the number of wows in movies occur.
#|    The plot is skewed right. Where 0 has the most counts and 4 wows is the least.
#|    The largest number of wows in the plot is 10 in 2 movies.
mds |> ggplot(aes(x = total_wows_in_movie)) +
  geom_histogram()
```

## Box Plot

```{r}
mds |> ggplot(aes(x = total_wows_in_movie)) +
  geom_boxplot()
```

## Density Plot

```{r}
mds |> ggplot(aes(x = total_wows_in_movie)) +
  geom_density()
```

## Box Plot By Category

```{r}
mds |> ggplot(aes(x = total_wows_in_movie, y = era)) +
  geom_boxplot()
```

## Density Plot By Category

```{r}
mds |> ggplot(aes(x = total_wows_in_movie, color = era)) +
  geom_density()
```

## Scatter Plot

```{r}
mds |> ggplot(aes(x = durationInSeconds, 
                  y = total_wows_in_movie)) +
  geom_point()
```

## Scatter Plot by Group

```{r}
mds |> ggplot(aes(x = durationInSeconds, 
                  y = total_wows_in_movie, color = era)) +
  geom_point()
```

## Add Regression Line

```{r}
mds |> ggplot(aes(x = durationInSeconds, 
                  y = total_wows_in_movie)) +
  geom_point() +
  geom_smooth(method = "lm", se = F)
```

## Smooth Line

```{r}
mds |> ggplot(aes(x = durationInSeconds, 
                  y = total_wows_in_movie)) +
  geom_point() +
  geom_smooth(se = F)
```

## Regression Lines by Group

```{r}
mds |> ggplot(aes(x = durationInSeconds, 
                  y = total_wows_in_movie,
                  color = era)) +
  geom_point() +
  geom_smooth(method = "lm", se = F)
```
